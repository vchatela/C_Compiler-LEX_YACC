{
  "name": "SmallerC-MicroProcessor",
  "tagline": "Smaller C Compiler using Lex and Yacc - Processor using VHDL for FPGA (Spartan 6 - Nexys 6)",
  "body": "# C compiler and his Microprocessor \r\nA Simplify C compiler written using `lex` and `yacc`.\r\nA VHDL implementation of a microprocessor able to understand the asm returned by the compiler.\r\n\r\n# Language and Assembler\r\n## Simplify C\r\nThe input language is a C-like language which recognize:\r\n- functions and main\r\n- only integer\r\n- multiple declaration of const like `const int i, j=3,k;` (only in main)\r\n- Basic arithmetic operations\r\n- `printf(var)` whith var as a variable\r\n- if/else while\r\n- tabulars\r\n- pointers `int a, *b = &a;`\r\n\r\n## Assembler \r\n- **Addition** : `ADD @result @op1 @op2`\r\n- **Multiplication** : `MUL @result @op1 @op2`\r\n- **Substraction** : `SOU @result @op1 @op2`\r\n- **Division** : `DIV @result @op1 @op2`\r\n- **Copy** : `COP @result @op`\r\n- **Affectation** : `AFC @result @op1 @op2`\r\n- **Jump** : `JMP instruction_number`\r\n- **Jump if false** : `JMF @X instruction_number`\r\n- **Comparison** : `INF(EQ) @result @op1 @op2` or `SUP(EQ) @result @op1 @op2` or `EQU @result @op1 @op2`\r\n- **Print** : `PRI result`\r\n- **Pointer1** : `PCOPA @pointedvalue @pointer `\r\n- **Pointer2** : `PCOPB @pointer @pointedvalue`\r\n- **Call function** : `CALL @jump `\r\n- **End function** : `RET`\r\n- **Return** : `EXT @val`\r\n- **Nothing** : `NOP`\r\n- **And** : `AND @result @op1 @op2`\r\n- **Or** : `OR @result @op1 @op2`\r\n\r\n#Implementation\r\n## Development of a simplify C Compiler using Lex and Yacc\r\n- Lexer to find tokens\r\n- Type 2 Grammar for C (using table of labels, functions, symbols)\r\n- Upgrade : show line and token when error\r\n\r\n## Conception of a RISC microprocessor with pipeline using VHDL and Spartan 6\r\nDifferent components :\r\n- 8 bits Compter\r\n- Instruction memory\r\n- Data memory\r\n- Arithmetic and Logic Unity (ALU)\r\n- Data path\r\n- Control Unity\r\n- Unity of detection of contingencies\r\n- 5 stages pipeline artchitecture\r\n\r\n#Compiler Usage \r\nYou must have `flex` and `bison`\r\n```\r\nvalentinc@valentinc:~$ flex --version\r\nflex 2.5.39\r\nvalentinc@valentinc:~$ bison --version \r\nbison (GNU Bison) 3.0.2\r\nÉcrit par Robert Corbett et Richard Stallman.\r\n\r\nCopyright © 2013 Free Software Foundation, Inc.\r\nCe logiciel est libre; voir les sources pour les conditions de\r\nreproduction. AUCUNE garantie n'est donnée; tant pour des raisons\r\nCOMMERCIALES que pour RÉPONDRE À UN BESOIN PARTICULIER.\r\n```\r\nTo compile it, you only need to :\r\n``` valentinc@valentinc:~/C_Compiler-VHDL/Compiler$ make ```\r\n\r\nYou can use it :\r\n```\r\nvalentinc@valentinc:~/C_Compiler-VHDL/Compiler$ ./compiler \r\nreading file 'Tests/test_correct.c'\r\n       |....+....:....+....:....+....:....+....:....+....:....+....:....+....:\r\n     1 |\r\n     2 |int f(){\r\n     3 |  if(0==0){\r\n     4 |    return 4;\r\n     5 |  }\r\n     6 |   return -1;\r\n     7 |}\r\n     8 |\r\n     9 |int f(int args){\r\n    10 |\r\n    11 |}\r\n    12 |\r\n    13 |int main(){\r\n    14 |\tint a = 2,b, *c, *d = &c;\r\n    15 |\tint tab[12];\r\n    16 |\tb = 14;\r\n    17 |\t*c = a;\r\n    18 |\ttab[3] = -19;\r\n    19 |\tprint(*c);\r\n    20 |\tprint(*d);\r\n    21 |\tif(a==14 || b ==2){\r\n    22 |\t f(1); \r\n    23 |\t}\r\n    24 |\telse{\r\n    25 |\t  a = b +3;\r\n    26 |\t}\r\n    27 |\tif(a == 17 && b == 14){\r\n    28 |\t  a = b - 3;\r\n    29 |\t  print(tab[3]);\r\n    30 |\t}\r\n    31 |\tprint(a);\r\n    32 |\treturn 0;\r\n    33 |}\r\n```\r\nBy default that's 'Tests/test_correct.c' which is used by you can choose another one \r\n```\r\nvalentinc@valentinc:~/C_Compiler-VHDL/Compiler$ ./compiler Tests/test_incorrect.c\r\nreading file 'Tests/test_incorrect.c'\r\n       |....+....:....+....:....+....:....+....:....+....:....+....:....+....:\r\n     1 |int f(){\r\n     2 |\tint a =2;\r\n     3 |\tint c,b=3;\r\n     4 |\treturn a+b;\r\n     5 |}\r\n     6 |\r\n     7 |int main(int a, int b){\r\n...... !........^^^............   token9:11\r\nError: syntax error, unexpected tINT, expecting tPF\r\nProcess executed returning error(s)\r\n```\r\n\r\n#Interpreter Usage \r\n```\r\nvalentinc@valentinc:~/C_Compiler-VHDL/Interpreter$ make\r\nyacc -Wconflicts-sr -d interpreteur_asm.yacc\r\nmv y.tab.h interpreteur.h\r\nflex interpreteur_asm.lex\r\ngcc y.tab.c lex.yy.c interpreteur_asm.c gestion_instructions.c -ll -o interpreteur\r\nvalentinc@valentinc:~/C_Compiler-VHDL/Interpreter$ ./interpreteur < assembler.asm \r\n--  0. JMP  11 \t\t\t{ Saut a la ligne 11 }\r\n---------------------------------------------------------------\r\n 11. AFC   1   2 \r\n 12. COP   1   1 \r\n 13. AFC   5   3 \r\n 14. PCOPB   4   5 \r\n 15. AFC  17  14 \r\n 16. COP   2  17 \r\n 17. COP  17   1 \r\n 18. PCOPB   3  17 \r\n 19. AFC  17  19 \r\n 20. COP   8  17 \r\n 21. PRI   3 \t\t\t---> Valeur contenue a l'adresse   3 : 2\r\n 22. PRI   4 \t\t\t---> Valeur contenue a l'adresse   4 : 3\r\n 23. COP  17   1 \r\n 24. AFC  18  14 \r\n 25. EQU  17  17  18 \t\t{ 0 (@17) = 14(@18) ? 0(@17) }\r\n 26. COP  18   2 \r\n 27. AFC  19   2 \r\n 28. EQU  18  18  19 \t\t{ 0 (@18) = 2(@19) ? 0(@18) }\r\n 29. OR  17  17  18 \r\n 30. JMF  17  34 \t\t{ La condition a l'adresse 17 est fausse, on saute a la ligne 34. }\r\n---------------------------------------------------------------\r\n 34. COP  17   2 \r\n 35. AFC  18   3 \r\n 36. ADD  17  17  18 \r\n 37. COP   1  17 \r\n 38. COP  17   1 \r\n 39. AFC  18  17 \r\n 40. EQU  17  17  18 \t\t{ 1 (@17) = 17(@18) ? 1(@17) }\r\n 41. COP  18   2 \r\n 42. AFC  19  14 \r\n 43. EQU  18  18  19 \t\t{ 1 (@18) = 14(@19) ? 1(@18) }\r\n 44. AND  17  17  18 \r\n 45. JMF  17  51 \t\t{ La condition a l'adresse 17 est vraie, on continue a la ligne 46. } \r\n 46. COP  17   2 \r\n 47. AFC  18   3 \r\n 48. SOU  17  17  18 \r\n 49. COP   1  17 \r\n 50. PRI   8 \t\t\t---> Valeur contenue a l'adresse   8 : 19\r\n 51. PRI   1 \t\t\t---> Valeur contenue a l'adresse   1 : 11\r\n 52. AFC  17   0 \r\n 53. EXT  17 \t\t\t Process exited with code 0\r\n 54. RET\r\n ```\r\n\r\n#Processor execution (Xillinx)\r\n The following code correctly executed on Xillinx 13.40\r\n ```\r\nsignal rom : rom_type:= (\r\n        x\"06051202\",    -- AFC 0x5\t0x12\t\tR5 = 12\r\n        x\"05040502\",    -- COP 0x4\t0x5\t\t\tR5 = R4 = 12\r\n        x\"05030402\",    -- COP 0x3\t0x4\t\t\tR5 = R4 = R3 = 12\r\n        x\"01040504\",    -- ADD 0x4\t0x5 0x4 \tR4 = 12 + 12 = 24 \r\n        x\"02030304\",    -- MUL 0x3  0x3  0x4\tR3 = 12 * 24 = 288\r\n        x\"06010002\",    -- AFC 0x1  0x0\t\t\tR1 = 0\r\n        x\"02010100\",    -- MUL 0x1  0x0  0x0\tR1 = 0*0  (Flag Z)\r\n        x\"0A0A0000\",    -- JMZ 0xA\t\t\t\tJMZ inst(09000000)\r\n        x\"ffffffff\",x\"ffffffff\",              -- dust x2\r\n        x\"09000000\",    -- JMP 0x0\t\t\t\tJMP inst(06051202)\r\n        x\"aaffffff\",x\"bbffffff\",x\"ccffffff\",  -- dust x3\r\n        others=> x\"00000000\");\r\n```\r\n ![Execution](http://s32.postimg.org/up9snmwxv/Capture.png)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}